import { map, markersCluster } from '../map.js';
import { fuelLabels, currentLang } from '../language.js';
import { logos, formatPrice } from '../utils.js';
import { getEl } from './dom.js';
import {
    selectedCities,
    selectedBrands,
    selectedFuelTypes,
    selectedDistricts,
    getExpandedCity,
    setExpandedCity,
    getExpandedDistrict,
    setExpandedDistrict
} from './state.js';
import { initialView } from '../map.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º markerMap –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ highlightStationInSidebar
let markerMap = [];

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (DRY –ø—Ä–∏–Ω—Ü–∏–ø)
function getFilteredStations(markerMap) {
    return markerMap.filter(({ station }) => {
        const okDistrict = selectedDistricts.size === 0 || selectedDistricts.has(station.district);
        const okCity = selectedCities.size === 0 || selectedCities.has(station.city);
        const okBrand = selectedBrands.size === 0 || selectedBrands.has(station.name);
        const okFuel = selectedFuelTypes.size === 0 ||
            Array.from(selectedFuelTypes).some(type => station[type] != null);
        return okDistrict && okCity && okBrand && okFuel;
    });
}

export function updateSidebar(markerMapParam) {
    markerMap = markerMapParam; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    const container = getEl("stationList");
    container.innerHTML = "";

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º, –ø–æ—Ç–æ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
    const districts = {};

    const filteredStations = getFilteredStations(markerMap);

    filteredStations.forEach(({ station, marker }) => {
        const district = station.district || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        const city = station.city || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        if (!districts[district]) {
            districts[district] = {};
        }

        if (!districts[district][city]) {
            districts[district][city] = [];
        }

        districts[district][city].push({ station, marker });
    });

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é: –†–∞–π–æ–Ω ‚Üí –ì–æ—Ä–æ–¥ ‚Üí –°—Ç–∞–Ω—Ü–∏–∏
    Object.keys(districts).sort().forEach(districtName => {
        const cities = districts[districtName];

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–π–æ–Ω–∞
        const districtHeader = document.createElement("div");
        districtHeader.className = "district-header";
        districtHeader.innerHTML = `<b>${districtName}</b>`;
        container.appendChild(districtHeader);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ —Ä–∞–π–æ–Ω–∞
        const districtContainer = document.createElement("div");
        districtContainer.className = "district-cities";
        districtContainer.style.display = getExpandedDistrict() === districtName ? "block" : "none";
        container.appendChild(districtContainer);

        // –ö–ª–∏–∫ –ø–æ —Ä–∞–π–æ–Ω—É - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º/—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞
        districtHeader.addEventListener("click", () => {
            const newExpandedDistrict = getExpandedDistrict() === districtName ? null : districtName;
            setExpandedDistrict(newExpandedDistrict);
            updateSidebar(markerMap);

            if (newExpandedDistrict) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Ä–∞–π–æ–Ω–∞ –¥–ª—è –∑—É–º–∞
                const districtStations = filteredStations.filter(({station}) => station.district === districtName);
                const bounds = L.latLngBounds(districtStations.map(f => f.marker.getLatLng()));
                map.flyToBounds(bounds, { animate: true, duration: 1.2, padding: [40, 40] });
            } else {
                map.setView(initialView.center, initialView.zoom);
            }
        });

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–π–æ–Ω–∞
        Object.keys(cities).sort().forEach(cityName => {
            const cityStations = cities[cityName];

            if (!cityStations.length) return;

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–æ—Ä–æ–¥–∞ (—Å –æ—Ç—Å—Ç—É–ø–æ–º)
            const cityHeader = document.createElement("div");
            cityHeader.className = "city-header";
            cityHeader.style.marginLeft = "15px";
            cityHeader.innerHTML = `<b>${cityName}</b>`;
            districtContainer.appendChild(cityHeader);

            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π –≥–æ—Ä–æ–¥–∞
            const listDiv = document.createElement("div");
            listDiv.className = "city-stations";
            listDiv.style.display = getExpandedCity() === cityName ? "block" : "none";
            listDiv.style.marginLeft = "15px";
            districtContainer.appendChild(listDiv);

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
            cityStations.forEach(({ station, marker }) => {
                const fuels = [
                    station.petrol ? `‚õΩ ${fuelLabels.petrol[currentLang]}: ${formatPrice("petrol", station.petrol)}` : null,
                    station.diesel ? `üõ¢Ô∏è ${fuelLabels.diesel[currentLang]}: ${formatPrice("diesel", station.diesel)}` : null,
                    station.gas ? `üî• ${fuelLabels.gas[currentLang]}: ${formatPrice("gas", station.gas)}` : null
                ].filter(Boolean).join("<br>");

                const key = Object.keys(logos).find(k => station.name.toUpperCase().includes(k));
                const logo = key ? logos[key] : "peco_default.png";

                const item = document.createElement("div");
                item.className = "station-item";
                item.dataset.stationId = `${station.latitude}-${station.longitude}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                item.innerHTML = `<img src="img/stations/${logo}" /><div><b>${station.name}</b><br>${fuels}</div>`;

                item.addEventListener("click", () => {
                    markersCluster.zoomToShowLayer(marker, () => {
                        map.flyTo(marker.getLatLng(), 19, { animate: true, duration: 1.5 });
                        setTimeout(() => marker.openPopup(), 1600);
                    });
                });

                listDiv.appendChild(item);
            });

            // –ö–ª–∏–∫ –ø–æ –≥–æ—Ä–æ–¥—É - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º/—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
            cityHeader.addEventListener("click", (e) => {
                e.stopPropagation(); // –ù–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –Ω–∞ —Ä–∞–π–æ–Ω

                const newExpanded = getExpandedCity() === cityName ? null : cityName;
                setExpandedCity(newExpanded);
                updateSidebar(markerMap);

                if (newExpanded) {
                    const bounds = L.latLngBounds(cityStations.map(f => f.marker.getLatLng()));
                    map.flyToBounds(bounds, { animate: true, duration: 1.2, padding: [40, 40] });
                } else {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–∏–¥—É —Ä–∞–π–æ–Ω–∞
                    const districtStations = filteredStations.filter(({station}) => station.district === districtName);
                    const bounds = L.latLngBounds(districtStations.map(f => f.marker.getLatLng()));
                    map.flyToBounds(bounds, { animate: true, duration: 1.2, padding: [40, 40] });
                }
            });
        });
    });
}

export function updateMapMarkers(markerMap) {
    markersCluster.clearLayers();

    const filteredStations = getFilteredStations(markerMap);

    filteredStations.forEach(({ marker }) => {
        markersCluster.addLayer(marker);
    });
}

// üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ sidebar
export function highlightStationInSidebar(station, markerMapParam) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π markerMap, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Å—Ç–æ–π
    const activeMarkerMap = markerMapParam || markerMap;

    const stationId = `${station.latitude}-${station.longitude}`;
    const districtName = station.district || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const cityName = station.city || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    console.log('Highlighting station:', station.name, 'District:', districtName, 'City:', cityName);

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ä–∞–π–æ–Ω –∏ –≥–æ—Ä–æ–¥
    setExpandedDistrict(districtName);
    setExpandedCity(cityName);

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º sidebar —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏
    updateSidebar(activeMarkerMap);

    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω—Ü–∏–∏
    setTimeout(() => {
        const stationElement = document.querySelector(`[data-station-id="${stationId}"]`);
        const sidebarContainer = getEl("stationList");

        console.log('Found station element:', stationElement);

        if (stationElement && sidebarContainer) {
            // üîß –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä sidebar –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö –∫ —Å—Ç–∞–Ω—Ü–∏–∏
            const offsetTop = stationElement.offsetTop - sidebarContainer.offsetTop;
            sidebarContainer.scrollTo({
                top: offsetTop - 10, // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                behavior: 'smooth'
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥–∞–Ω–∏—è
            stationElement.classList.add('station-highlight');

            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                stationElement.classList.remove('station-highlight');
            }, 1000);
        } else {
            console.warn('Station element or sidebar container not found');
        }
    }, 150); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
}